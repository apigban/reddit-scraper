#!/usr/bin/env python3.7

import getInfo
import requests
import json
import time
import logging
import logging.handlers
import setupLog

def fileOut(subreddit, contentType, response):
    timeStr = time.strftime("%Y%m%d")
    fileName = f"{subreddit}-{contentType}-{timeStr}.json"

    with open(fileName, "a") as jsonFile:
        json.dump(response, jsonFile)
    print(5*"-" + f"Write to {fileName} Successful")


def urlConstructor(subreddit, contentType, initial, final, voteSort):

    baseURL = "https://api.pushshift.io/reddit/search/"
    apiURL = baseURL + "{0}/?subreddit={1}&before={2}&after{3}&sort_type=score&sort={4}&metadata=True".format(contentType, subreddit, initial, final, voteSort)

    logger = setupLog.setupLogger('urlConstructor', 'urlConstructor.log')
    logger.warning("\n" + 5*"-" + f"Loading URL:  {apiURL}\n")
    return apiURL


#def metaCheck():


#    if contentType == "submissions"
#        apiURL = baseURL + "{0}/?subreddit={1}&before={2}&after{3}&sort_type=score&sort={4}".format(contentType, subreddit, initial, final, voteSort)
#        print(f"Loading URL:  {apiURL}")
#        return apiURL
#
#    elif contentType == "comments"
#        apiURL = baseURL + "{0}/?subreddit={1}&before={2}&after{3}&sort_type=score&sort={4}".format(contentType, subreddit, initial, final, voteSort)
#
#    elif contentType == "all"
#        apiURL = baseURL + "{0}/?subreddit={1}&before={2}&after{3}&sort_type=score&sort={4}".format(contentType, subreddit, initial, final, voteSort)
#
#    else:
#        print("Default Input: Submissions\nUsing Submissions"i)

def scraper(subreddit=None, contentType=None, initial=None, final=None, limit=None, voteSort=None):

    argList = getInfo.fetchInput()

    apiURL = urlConstructor(argList[0], argList[1], argList[2], argList[3], argList[5])
    response = requests.get(apiURL)
    jsonData = response.json()
    fileOut(argList[0], argList[1], jsonData)

    logger = setupLog.setupLogger('scraper', 'scraper.log')
    logger.warning('JSON dumped to file successfully')

def main():
    logger = setupLog.setupLogger('main','main.log')

    logger.warning('\nProgram Started')
    scraper()
    logger.warning('\nProgram Ended')


if __name__ == "__main__":
    #logger = setupLog.setupLogger('main', 'main.log')
    #logger = logging.getLogger('main')
    #logger.info('wat')
    main()
